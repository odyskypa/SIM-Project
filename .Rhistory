}
bootdis<-boot(SwissLabor, corr.fun, R = 999)
plot(bootdis)
boot.ci( boot.out=bootdis )
Prestige
df<-Prestige
df$f.prof<-0
df$f.prof[df$type=="prof"]<-1
table(df$type, useNA = "ifany")
df$f.prof
table(df$f.prof)
df$f.prof<-factor(df$f.prof,labels=c("Prof.No","Prof.Yes"))
summary(df)
levels(df$type) <- paste0("f.type-", levels(df$type) )
# Missing data
# Artifitially setting of missing data for 0% women
ll <- which( df$women==0); length(ll)
df$women[ ll ] <- NA
# Numeric variables: remove NA by assignment of variable mean
mm<-mean(df$women,na.rm=T);mm
df[is.na(df$women),"women"]<-mm
# Validation of imputed variables
summary(Prestige$women)
summary(df$women)
par(mfrow=c(1,2))
hist(Prestige$women,col="green")
hist(df$women,col="red")
par(mfrow=c(1,1))
summary(df)
summary(Prestige)
# Professional Tools: library missMDA
library(missMDA)
df[,1:4]<-Prestige[,1:4]
ll <- which( df$women==0); length(ll)
df$women[ ll ] <- NA
summary(df)
res.pca<-imputePCA(df[,1:4])
summary(res.pca$completeObs)
# mice library: useful for numeric and factor imputation
#
library(mice)
res.mice <- mice(df)
str(res.mice)
res.mice$data # Original dataset
complete(res.mice) # Data frame containing completed data set
# Plot
#
par(mfrow=c(1,3))
hist(Prestige$women,col="green")
hist(df$women,col="red")
hist(res.pca$completeObs[,3],col="blue")
par(mfrow=c(1,1))
#type
res.mca<-imputeMCA(df[,6:7],method="EM")
cbind(res.mca$completeObs[,"type"],df$type)
df[,1:6]<-Prestige[,1:6] # NAs are retained
options(contrasts=c("contr.treatment","contr.treatment"))
library(chemometrics)
res.out<-Moutlier(Prestige[,1:4],quantile=0.975)
str(res.out)
res.out
quantile(res.out$md,seq(0,1,0.025))
which((res.out$md > res.out$cutoff) & (res.out$rd > res.out$cutoff))
plot( res.out$md, res.out$rd )
text(res.out$md, res.out$rd, labels=rownames(df),adj=1, cex=0.5)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
#Data types
typeof(df$age)
typeof(df$sex)
typeof(df$bmi)
typeof(df$children)
typeof(df$smoker)
typeof(df$region)
typeof(df$charges)
#There is one duplicated
dupli <- duplicated(df)
dupli_ind <- which(dupli)
length(dupli_ind) #one duplicated row
clear
length(dupli_ind) #one duplicated row
#df<- df[-which(duplicated(df)), ]
df<- df[-dupli_ind, ]
any(duplicated(df)) #FALSE
summary(df)
ll <- which( df$age=="NA"); length(ll)
ll <- which( df$sex=="NA"); length(ll)
ll <- which( df$bmi=="NA"); length(ll)
ll <- which( df$children=="NA"); length(ll)
ll <- which( df$smoker=="NA"); length(ll)
ll <- which( df$region=="NA"); length(ll)
ll <- which( df$charges=="NA"); length(ll)
library(ggplot2) #Most famous library for R plotting
library(GGally)
library(car)
ggpairs(df[,c(7,1:6)])
#CREATE FACTOR FOR QUALITATIVE VARIABLES
#SEX, REGION and SMOKER
unique(df$region)
unique(df$sex)
# 1- Initialize a variable with all values setted at 0
df$f.sex<-0
# 2- Change its value for the cases where type of sex equals "male"
df$f.sex[df$sex=="male"]<-1
# * Are there NA's present at the type variable
table(df$sex, useNA = "ifany")
df$f.sex
table(df$f.sex) #NA's in type have been converted to 0 as they are not equal to prof
str(df) #Type of variables present at df
df$f.sex<-factor(df$f.sex, labels=c("F","M")) #Convert variable created to factor type
str(df) #Conversion check
summary(df)
# 1- Initialize a variable with all values setted at 0
df$f.reg<-0
# 2- Change its value for the cases where type of region equals "southwest", "southeast", "northwest"
df$f.reg[df$region=="southwest"]<-3
df$f.reg[df$region=="southeast"]<-2
df$f.reg[df$region=="northwest"]<-1
# * Are there NA's present at the type variable
table(df$region, useNA = "ifany")
df$f.reg
table(df$f.reg) #WHAT IS THAT? -----> NA's in type have been converted to 0 as they are not equal to prof
str(df) #Type of variables present at df
df$f.reg<-factor(df$f.reg,labels=c("NE","NW","SE","SW")) #Convert variable created to factor type
str(df) #Conversion check
# 1- Initialize a variable with all values setted at 0
df$f.smok<-0
# 2- Change its value for the cases where type of smoker equals "yes"
df$f.smok[df$smoker=="yes"]<-1
# * Are there NA's present at the type variable
table(df$smoker, useNA = "ifany")
df$f.smok
table(df$f.smok) #NA's in type have been converted to 0 as they are not equal to prof
str(df) #Type of variables present at df
df$f.smok<-factor(df$f.smok, labels=c("No","Yes")) #Convert variable created to factor type
str(df) #Conversion check
summary(df)
#We will only continue with those factor so we delete the previous variables
df$sex <- NULL #delete sex
df$region <- NULL #delete region
df$smoker <- NULL #delete smoker
summary(df)
# 1- Histogram for graphical analysis:
hist(df$charges,freq=F,breaks=10)
# 2- Get mean and std of the variable:
m=mean(df$charges);std=sd(df$charges);m;std
# 3- What would be de density curve of a normal distribution with the same mean and std as prestige?
curve(dnorm(x,m,std),col="red",lwd=2,add=T)
shapiro.test(df$charges) #P-value < 0.05 -> We can reject H0
acf(df$charges)
library(lmtest)
dwtest(df$charges~1)
?dwtest
# Interesting function:
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
# 1 - BMI:
par(mfrow=c(1,1))
Boxplot(df$bmi)
var_out<-calcQ(df$bmi)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_bmi<-which((df$bmi<var_out$souti)|(df$bmi>var_out$souts))
length(llout_bmi)
# 2 - AGE:
par(mfrow=c(1,1))
Boxplot(df$age)
var_out<-calcQ(df$age)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_age<-which((df$age<var_out$souti)|(df$age>var_out$souts))
length(llout_age)
# 3 - CHILDREN:
par(mfrow=c(1,1))
Boxplot(df$children)
var_out<-calcQ(df$children)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_children<-which((df$children<var_out$souti)|(df$children>var_out$souts))
length(llout_children)
# 4 - CHARGES:
par(mfrow=c(1,1))
Boxplot(df$charges)
var_out<-calcQ(df$charges)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_charges<-which((df$charges<var_out$souti)|(df$charges>var_out$souts))
length(llout_charges)
# Assign them as NA's to impute them later -> AS IS THE TARGET VARIABLE, DO NOT IMPUTE :)
df[llout_charges, 'charges'] <- NA
summary(df)
# To check validation
summary(df$charges)
#Here we will make a copy of the dataset with NA's not to delete anything
dfNA <- df
summary(dfNA)
#Now we will remove the rows where the NA value exists in our target variable
df <- df[-llout_charges,]
# Validation of imputed variables
summary(df$charges)
summary(df)
# Treating NA values of target variable (charges)
summary(df$charges)
summary(df$charges)
summary(df)
library(chemometrics)
res.mout <- Moutlier( df[ , c(1:4)], quantile = 0.95 )
str(res.mout)
res.mout
par(mfrow=c(1,1))
plot( res.mout$md, res.mout$rd )
text(res.out$md, res.out$rd, labels=rownames(df),adj=1, cex=0.5)
par(mfrow=c(1,1))
plot( res.mout$md, res.mout$rd )
text(res.mout$md, res.mout$rd, labels=rownames(df),adj=1, cex=0.5)
abline( h=res.mout$cutoff, lwd=2, col="red")
abline( v=res.mout$cutoff, lwd=2, col="red")
llmout <- which( ( res.mout$md > res.mout$cutoff ) & (res.mout$rd > res.mout$cutoff) );llmout
df[llmout,]
res.mout$md[llmout]
df$mout <- 0
df$mout[ llmout ] <- 1
df$mout <- factor( df$mout, labels = c("MvOut.No","MvOut.Yes"))
summary(df)
knitr::opts_chunk$set(echo = TRUE)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
knitr::opts_chunk$set(echo = TRUE)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
df <- read.csv("insurance.csv")
summary(df)
df <- read.csv("insurance.csv")
summary(df)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
df <- read.csv("insurance.csv")
summary(df)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
("insurance.csv")
summary(df)
knitr::opts_chunk$set(echo = TRUE)
# Clear plots from the R plots view:
if(!is.null(dev.list())) dev.off()
# Clean workspace - No variables at the current workspace
rm(list=ls())
#setwd("/Users/anderbarriocampos/Desktop/UPC/SIM/SIMassignment")
setwd("C:/Users/odyky/Desktop/SIM-Project")
df <- read.csv("insurance.csv")
summary(df)
typeof(df$age)
typeof(df$sex)
typeof(df$bmi)
typeof(df$children)
typeof(df$smoker)
typeof(df$region)
typeof(df$charges)
dupli <- duplicated(df)
dupli_ind <- which(dupli)
length(dupli_ind) #one duplicated row
View(df)
View(df)
dupli <- duplicated(df)
dupli_ind <- which(dupli)
dupli_ind; length(dupli_ind)
df [dupli_ind,]
df<- df[-dupli_ind, ]
any(duplicated(df))
unique(df$sex)
unique(df$smoker)
unique(df$region)
df <- read.csv("insurance.csv")
summary(df)
typeof(df$age)
typeof(df$sex)
typeof(df$bmi)
typeof(df$children)
typeof(df$smoker)
typeof(df$region)
typeof(df$charges)
ll <- which( df$age=="NA"); length(ll)
ll <- which( df$sex=="NA"); length(ll)
ll <- which( df$bmi=="NA"); length(ll)
ll <- which( df$children=="NA"); length(ll)
ll <- which( df$smoker=="NA"); length(ll)
ll <- which( df$region=="NA"); length(ll)
ll <- which( df$charges=="NA"); length(ll)
dupli <- duplicated(df)
dupli_ind <- which(dupli)
dupli_ind; length(dupli_ind)
df [dupli_ind,]
df<- df[-dupli_ind, ]
any(duplicated(df))
unique(df$sex)
unique(df$smoker)
unique(df$region)
# 1- Initialize a variable with all values setted at 0
df$f.sex<-0
# 2- Change its value for the cases where type of sex equals "male"
df$f.sex[df$sex=="male"]<-1
# * Are there NA's present at the type variable
table(df$sex, useNA = "ifany")
df$f.sex
table(df$f.sex) #NA's in type have been converted to 0 as they are not equal to prof
str(df) #Type of variables present at df
# 3- Convering f.sex to labeled factor
df$f.sex<-factor(df$f.sex, labels=c("F","M"))
View(df)
# 1- Initialize a variable with all values setted at 0
df$f.smok<-0
# 2- Change its value for the cases where type of smoker equals "yes"
df$f.smok[df$smoker=="yes"]<-1
# 3- Convering f.smok to labeled factor
df$f.smok<-factor(df$f.smok, labels=c("No","Yes"))
# 1- Initialize a variable with all values setted at 0
df$f.reg<-0
# 2- Change its value for the cases where type of region equals:
# "southwest", "southeast", "northwest"
df$f.reg[df$region=="southwest"]<-3
df$f.reg[df$region=="southeast"]<-2
df$f.reg[df$region=="northwest"]<-1
# 3- Convering f.reg to labeled factor
df$f.reg<-factor(df$f.reg,labels=c("NE","NW","SE","SW"))
summary(df$age)
boxplot(df$age)
Boxplot(df$age)
library(car)
Boxplot(df$age)
library(car)
Boxplot(df$age, title= "Boxplot of variable Age")
Boxplot(df$age, title= "Boxplot of variable Age")
Boxplot(df$age, main= "Boxplot of variable Age")
table(discretize(df$f.age, method = "interval", breaks = 3,
labels = c("young","medium", "old")))
library(arules)
table(discretize(df$f.age, method = "interval", breaks = 3,
labels = c("young","medium", "old")))
# 1 - Copying column age to a new column named f.age
df$f.age<-df$age
# 2 - Checking distribution of sample for variable age
# in order to decide how to discrtize the values
Boxplot(df$f.age, main= "Boxplot of variable Age")
table(discretize(df$f.age, method = "interval", breaks = 3,
labels = c("young","medium", "old")))
# Once age distribution is almost equally devided
# into its range values, it is decided to discretize
# by using equal intervals
temp <- table(discretize(df$f.age, method = "frequency", breaks = 3,
labels = c("young","medium", "old")))
temp
# Once age distribution is almost equally devided
# into its range values, it is decided to discretize
# by using equal intervals
df$f.age<-table(discretize(df$f.age, method = "interval", breaks = 3,
labels = c("young","medium", "old")))
# Once age distribution is almost equally devided
# into its range values, it is decided to discretize
# by using equal intervals
df$f.age<-discretize(df$f.age, method = "interval", breaks = 3,
labels = c("young","medium", "old"))
View(df)
View(df)
# 1 - Copying column age to a new column named f.age
df$f.age<-df$age
# 2 - Checking distribution of sample for variable age
# in order to decide how to discrtize the values
Boxplot(df$f.age, main= "Boxplot of variable Age")
# Once age distribution is almost equally devided
# into its range values, it is decided to discretize
# by using equal intervals
df$f.age<-discretize(df$f.age, method = "interval", breaks = 3,
labels = c("Young","Medium", "Old"))
str(df)
# 1 - Copying column bmi to a new column named f.bmi
df$f.bmi<-df$bmi
# 2- Discretizing directly based on normal BMI values of Bibliography
df$f.bmi<-discretize(df$f.bmi, method = "fixed", breaks = c(-1,18.5,24.9,1000),
labels = c("Low","Normal", "High"))
View(df)
str(df)
typeof(df)
#We will only continue with those factor so we delete the previous variables
df$sex <- NULL #delete sex
df$region <- NULL #delete region
df$smoker <- NULL #delete smoker
str(df)
View(df)
# 1- Histogram for graphical analysis:
hist(df$charges,freq=F,breaks=10)
# 2- Get mean and std of the variable:
m=mean(df$charges);std=sd(df$charges);m;std
# 3- What would be de density curve of a normal distribution with the same mean and std as prestige?
curve(dnorm(x,m,std),col="red",lwd=2,add=T)
shapiro.test(df$charges)
acf(df$charges)
acf(df$charges)
dwtest(df$charges~1)
library(lmtest)
dwtest(df$charges~1)
View(df)
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
# 2 - AGE:
par(mfrow=c(1,1))
Boxplot(df$age)
library(arules)
Boxplot(df$age)
car
library(car)
Boxplot(df$age)
var_out<-calcQ(df$age)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_age<-which((df$age<var_out$souti)|(df$age>var_out$souts))
length(llout_age)
# 2 - BMI:
Boxplot(df$bmi)
var_out<-calcQ(df$bmi)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
var_out
llout_bmi<-which((df$bmi<var_out$souti)|(df$bmi>var_out$souts))
length(llout_bmi)
Boxplot(df$children, main = "Boxplot of Variable BMI")
var_out<-calcQ(df$children)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_children<-which((df$children<var_out$souti)|(df$children>var_out$souts))
length(llout_children)
# 4 - CHARGES:
Boxplot(df$charges, main = "Boxplot of Variable Charges")
var_out<-calcQ(df$charges)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=var_out$mouts,col="red")
llout_charges<-which((df$charges<var_out$souti)|(df$charges>var_out$souts))
length(llout_charges)
summary(df)
summary(df)[0]
summary(df)[1]
df$charges>var_out$souts
df$charges<var_out$souti
llout_charges<-which((df$charges<var_out$souti)||(df$charges>var_out$souts))
llout_charges<-which((df$charges<var_out$souti)||(df$charges>var_out$souts))
llout_charges<-which((df$charges<var_out$souti)|(df$charges>var_out$souts))
length(llout_charges)
library(chemometrics)
library(FactoMineR)
